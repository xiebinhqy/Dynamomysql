<Workspace Version="0.7.5.3566" X="142.95600605555" Y="231.241055329102" zoom="0.845950052012563" Description="Returns all occurences of a regular expression within a string (or list of strings). The syntax for regular expressions is explained at&#xD;&#xA;http://ironpython-test.readthedocs.org/en/latest/howto/regex.html" Category="Clockwork.Core.String.Actions" Name="String.FindRegularExpression" ID="0c28c11b-4c4e-4e63-a92a-976ada3a3906">
  <Elements>
    <Dynamo.Nodes.Function type="Dynamo.Nodes.Function" guid="6c916853-f2a9-4538-9164-ac374103c476" nickname="Turn Into List" x="179.409951526397" y="142.998733463936" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <ID value="cd09ad33-8c34-4850-ac26-24448d92c38f" />
      <Name value="Turn Into List" />
      <Description value="Turns an element (or a nested list) into a flat list" />
      <Inputs>
        <Input value="item" />
      </Inputs>
      <Outputs>
        <Output value="" />
      </Outputs>
    </Dynamo.Nodes.Function>
    <Dynamo.Nodes.Symbol type="Dynamo.Nodes.Symbol" guid="530bb7cb-3104-4bfe-b27c-d9235d17535d" nickname="Input" x="210.11412424211" y="74.6287309836835" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <Symbol value="regex" />
    </Dynamo.Nodes.Symbol>
    <Dynamo.Nodes.Symbol type="Dynamo.Nodes.Symbol" guid="601f6589-cfcc-41d1-8a9f-288c81465dcf" nickname="Input" x="3.22584269662917" y="13.0314606741574" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <Symbol value="string(s)" />
    </Dynamo.Nodes.Symbol>
    <Dynamo.Nodes.Output type="Dynamo.Nodes.Output" guid="79e28ed5-10cb-448b-9bd5-e1c700e5870e" nickname="Output" x="891" y="16" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <Symbol value="bool" />
    </Dynamo.Nodes.Output>
    <DSIronPythonNode.PythonNode type="DSIronPythonNode.PythonNode" guid="d6455be2-8efe-4008-afe7-57ebf981e42f" nickname="Python Script" x="352.614117532386" y="96.6115598579392" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="2">
      <Script>import clr
import re

regexstring = IN[0]
regexlist = IN[1]
elementlist = list()
thisexp = re.compile(regexstring)
for item in regexlist:
	try:
		elementlist.append(thisexp.findall(item))
	except:
		elementlist.append(list())
OUT = elementlist</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.Function type="Dynamo.Nodes.Function" guid="c4dbd8d0-8164-4a1c-a0e7-fc5e06687c02" nickname="ReturnListOrSingleValue" x="614" y="16" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <ID value="44ac4888-4aa4-49a9-9344-23b729c11df9" />
      <Name value="ReturnListOrSingleValue" />
      <Description value="If the item in input #1 is not a list, only the first item of the list in input #2 will be returned." />
      <Inputs>
        <Input value="item #1 (unknown)" />
        <Input value="item #2 (list)" />
      </Inputs>
      <Outputs>
        <Output value="" />
      </Outputs>
    </Dynamo.Nodes.Function>
  </Elements>
  <Connectors>
    <Dynamo.Models.ConnectorModel start="6c916853-f2a9-4538-9164-ac374103c476" start_index="0" end="d6455be2-8efe-4008-afe7-57ebf981e42f" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="530bb7cb-3104-4bfe-b27c-d9235d17535d" start_index="0" end="d6455be2-8efe-4008-afe7-57ebf981e42f" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="601f6589-cfcc-41d1-8a9f-288c81465dcf" start_index="0" end="6c916853-f2a9-4538-9164-ac374103c476" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="601f6589-cfcc-41d1-8a9f-288c81465dcf" start_index="0" end="c4dbd8d0-8164-4a1c-a0e7-fc5e06687c02" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="d6455be2-8efe-4008-afe7-57ebf981e42f" start_index="0" end="c4dbd8d0-8164-4a1c-a0e7-fc5e06687c02" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="c4dbd8d0-8164-4a1c-a0e7-fc5e06687c02" start_index="0" end="79e28ed5-10cb-448b-9bd5-e1c700e5870e" end_index="0" portType="0" />
  </Connectors>
  <Notes />
</Workspace>