<Workspace Version="0.7.5.3437" X="30" Y="259.312015503876" zoom="2.48449612403101" Description="Parses the vertices of an (unscaled) truncated icosahedron and returns a pair of points for each strut." Category="Clockwork.Geometry.Buckyball.Helpers" Name="Buckyball.Struts" ID="e0b7100c-4209-45f5-818e-a6231aa65794">
  <Elements>
    <Dynamo.Nodes.Symbol type="Dynamo.Nodes.Symbol" guid="0d41d410-a47b-4449-931d-db961358813e" nickname="Input" x="0" y="0" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <Symbol value="Points" />
    </Dynamo.Nodes.Symbol>
    <Dynamo.Nodes.Output type="Dynamo.Nodes.Output" guid="859c21f1-6723-4573-bea3-16eb1f44687a" nickname="Output" x="443" y="29" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <Symbol value="Struts" />
    </Dynamo.Nodes.Output>
    <DSIronPythonNode.PythonNode type="DSIronPythonNode.PythonNode" guid="810115d6-db55-475e-8bb2-c1a3d1df9e93" nickname="Python Script" x="219" y="29" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="2">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

points = IN[0]
almostzero = IN[1]
struts = list()

# this function recursively finds all the pairs of points of the buckyball struts
def BuckyballStruts(points,struts):
	firstpoint = points[0]
	restofpoints = points[1:]
	# measure distance between first point and rest of points
	distances = [firstpoint.DistanceTo(x) for x in restofpoints]
	# filter out all points that do not have a distance of 2 to the first point
	strutpoints = list()
	strutpointpairs = list()
	i = 0
	for dist in distances:
		# use a little tolerance so we catch all struts
		if dist &gt; 2 - almostzero and dist &lt; 2 + almostzero:
			strutpoints.append(restofpoints[i])
			strutpointpairs.append((firstpoint,restofpoints[i]))
		i += 1
	# add strutpointpairs to struts
	if len(strutpointpairs) &gt; 0: struts.extend(strutpointpairs)
	# Continue processing the list recursively until there's only one point left. By always removing the first point from the list, we ensure that no duplicate struts are computed.
	if len(restofpoints) &gt; 1:
		return BuckyballStruts(restofpoints,struts)
	else: return (restofpoints,struts)
	
OUT = BuckyballStruts(points,struts)[1]</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.Function type="Dynamo.Nodes.Function" guid="54f098fb-aa7e-4f17-894b-330cec41fc70" nickname="Math.AlmostZero" x="0" y="84" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <ID value="7203b34a-da51-4672-8993-3591ebf9537d" />
      <Name value="Math.AlmostZero" />
      <Description value="Returns a feasable computational tolerance to zero (1.0e-9 or a billionth of 1) for use in calculations. More background info: https://github.com/ikeough/Dynamo/issues/879" />
      <Inputs />
      <Outputs>
        <Output value="1.0e-9" />
      </Outputs>
    </Dynamo.Nodes.Function>
  </Elements>
  <Connectors>
    <Dynamo.Models.ConnectorModel start="0d41d410-a47b-4449-931d-db961358813e" start_index="0" end="810115d6-db55-475e-8bb2-c1a3d1df9e93" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="810115d6-db55-475e-8bb2-c1a3d1df9e93" start_index="0" end="859c21f1-6723-4573-bea3-16eb1f44687a" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="54f098fb-aa7e-4f17-894b-330cec41fc70" start_index="0" end="810115d6-db55-475e-8bb2-c1a3d1df9e93" end_index="1" portType="0" />
  </Connectors>
  <Notes />
</Workspace>